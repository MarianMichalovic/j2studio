import sharp from 'sharp';
import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîÑ === Oprava orient√°cie obr√°zkov ===');
console.log('üìê Automaticky opravuje EXIF orient√°ciu bez zmeny kvality');
console.log('');

// Funkcia na opravu orient√°cie jednotliv√©ho obr√°zka
async function fixOrientation(inputPath, outputPath) {
  try {
    const metadata = await sharp(inputPath).metadata();
    
    // Kontrola ƒçi m√° obr√°zok EXIF orient√°ciu
    if (!metadata.orientation || metadata.orientation === 1) {
      return {
        success: true,
        fixed: false,
        message: 'Orient√°cia spr√°vna'
      };
    }

    // Oprava orient√°cie s vysokou kvalitou
    await sharp(inputPath)
      .rotate() // Automaticky oprav√≠ orient√°ciu
      .jpeg({ quality: 95, progressive: true }) // Vysok√° kvalita pre opravu
      .toFile(outputPath);

    return {
      success: true,
      fixed: true,
      orientation: metadata.orientation,
      message: `Opraven√° orient√°cia ${metadata.orientation}`
    };
  } catch (error) {
    return {
      success: false,
      fixed: false,
      error: error.message
    };
  }
}

// Funkcia na spracovanie cel√©ho prieƒçinka
async function fixFolderOrientation(inputFolder, outputFolder) {
  const folderName = path.basename(inputFolder);
  console.log(`üìÅ === ${folderName.toUpperCase()} ===`);

  if (!await fs.pathExists(inputFolder)) {
    console.log(`‚ùå Prieƒçinok ${inputFolder} neexistuje!`);
    return;
  }

  // Vytvorenie v√Ωstupn√©ho prieƒçinka
  await fs.ensureDir(outputFolder);
  console.log(`üìÇ V√Ωstupn√Ω prieƒçinok: ${outputFolder}`);

  // Z√≠skanie v≈°etk√Ωch obr√°zkov
  const files = await fs.readdir(inputFolder);
  const imageFiles = files.filter(file => {
    const ext = path.extname(file).toLowerCase();
    return ['.jpg', '.jpeg'].includes(ext);
  });

  console.log(`üîç N√°jden√Ωch ${imageFiles.length} JPEG obr√°zkov`);

  let processed = 0;
  let fixed = 0;

  for (const file of imageFiles) {
    const inputPath = path.join(inputFolder, file);
    const outputPath = path.join(outputFolder, file);

    process.stdout.write(`üîÑ Kontrolujem: ${file} ... `);

    const result = await fixOrientation(inputPath, outputPath);

    if (result.success) {
      if (result.fixed) {
        console.log(`‚úÖ ${result.message}`);
        fixed++;
      } else {
        console.log(`‚ö™ ${result.message}`);
        // Skop√≠ruj p√¥vodn√Ω s√∫bor ak nie je potrebn√° oprava
        await fs.copy(inputPath, outputPath);
      }
      processed++;
    } else {
      console.log(`‚ùå Chyba: ${result.error}`);
    }
  }

  console.log(`\nüìä S√∫hrn ${folderName}:`);
  console.log(`   ‚úÖ Spracovan√Ωch: ${processed}/${imageFiles.length} obr√°zkov`);
  console.log(`   üîÑ Opraven√Ωch orient√°ci√≠: ${fixed} obr√°zkov`);
  console.log('');
}

// Hlavn√° funkcia
async function main() {
  const projectRoot = path.dirname(__dirname);
  
  const folders = [
    {
      input: path.join(projectRoot, 'public', 'img', 'kuchyna'),
      output: path.join(projectRoot, 'public', 'img', 'kuchyna_fixed_orientation')
    },
    {
      input: path.join(projectRoot, 'public', 'img', 'montaze'),
      output: path.join(projectRoot, 'public', 'img', 'montaze_fixed_orientation')
    }
  ];

  console.log('üöÄ Zaƒç√≠nam opravu orient√°cie...\n');

  for (const folder of folders) {
    await fixFolderOrientation(folder.input, folder.output);
  }

  console.log('üéâ === HOTOVO ===');
  console.log('‚ú® Obr√°zky s opravenou orient√°ciou s√∫ ulo≈æen√© v:');
  folders.forEach(folder => {
    console.log(`   üìÅ ${folder.output}`);
  });
  console.log('\nüí° Tip: Teraz m√¥≈æete spusti≈• optimaliz√°ciu na opraven√© obr√°zky.');
  console.log('üí° Alebo pou≈æite nov√Ω skript optimize-images.js ktor√Ω u≈æ m√° opravu orient√°cie.');
}

// Spustenie
main().catch(error => {
  console.error('‚ùå Kritick√° chyba:', error);
  process.exit(1);
});
